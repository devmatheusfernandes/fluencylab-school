// lib/env/startup.ts

import { runFullValidation, debugEnvVars } from './validation';

/**
 * Executa valida√ß√µes de inicializa√ß√£o da aplica√ß√£o
 * Deve ser chamado no in√≠cio da aplica√ß√£o
 */
export function initializeApp(): void {
  console.log('üöÄ Inicializando aplica√ß√£o...');
  
  try {
    // Executar valida√ß√£o completa das environment variables
    runFullValidation();
    
    // Em desenvolvimento, mostrar debug das env vars
    if (process.env.NODE_ENV === 'development') {
      debugEnvVars();
    }
    
    console.log('‚úÖ Aplica√ß√£o inicializada com sucesso');
  } catch (error) {
    console.error('‚ùå Falha na inicializa√ß√£o da aplica√ß√£o:', error);
    
    // Em produ√ß√£o, falhar completamente
    if (process.env.NODE_ENV === 'production') {
      process.exit(1);
    }
    
    // Em desenvolvimento, apenas avisar
    console.warn('‚ö†Ô∏è Continuando em modo de desenvolvimento com configura√ß√£o incompleta');
  }
}

/**
 * Middleware para Next.js que executa valida√ß√µes
 */
export function createEnvValidationMiddleware() {
  return function envValidationMiddleware() {
    // Executar valida√ß√£o apenas uma vez
    if (!global.__envValidated) {
      initializeApp();
      global.__envValidated = true;
    }
  };
}

// Declara√ß√£o global para TypeScript
declare global {
  var __envValidated: boolean | undefined;
}